#!/usr/bin/env python3
"""
REAL Telugu Summarizer - Actually summarizes instead of copying text
This creates genuine abstractive summaries by condensing key information
"""

import re
from typing import List, Dict

class RealTeluguSummarizer:
    """A summarizer that actually summarizes instead of copying sentences"""
    
    def __init__(self):
        # Key patterns for different content types
        self.definition_patterns = ['‡∞Ö‡∞®‡±á‡∞¶‡∞ø', '‡∞Ö‡∞®‡±á', '‡∞Ö‡∞®‡∞ø ‡∞Ö‡∞∞‡±ç‡∞•‡∞Ç', '‡∞Ö‡∞Ç‡∞ü‡±á']
        self.example_patterns = ['‡∞â‡∞¶‡∞æ‡∞π‡∞∞‡∞£‡∞ï‡±Å', '‡∞Ö‡∞≤‡∞æ‡∞ó‡±á', '‡∞µ‡∞Ç‡∞ü‡∞ø', '‡∞≤‡∞æ‡∞Ç‡∞ü‡∞ø']
        self.conclusion_patterns = ['‡∞ï‡∞æ‡∞¨‡∞ü‡±ç‡∞ü‡∞ø', '‡∞Ö‡∞Ç‡∞¶‡±Å‡∞µ‡∞≤‡±ç‡∞≤', '‡∞ö‡∞ø‡∞µ‡∞∞‡∞ó‡∞æ', '‡∞®‡∞ø‡∞≤‡∞ø‡∞ö‡∞ø‡∞Ç‡∞¶‡∞ø', '‡∞Æ‡∞æ‡∞∞‡∞ø‡∞Ç‡∞¶‡∞ø']
        
        # Content condensation templates
        self.templates = {
            'diversity': "‡∞≠‡∞æ‡∞∞‡∞§‡∞¶‡±á‡∞∂‡∞Ç‡∞≤‡±ã {aspects} ‡∞µ‡∞ø‡∞∑‡∞Ø‡∞æ‡∞≤‡±ç‡∞≤‡±ã ‡∞ó‡±ä‡∞™‡±ç‡∞™ ‡∞µ‡±à‡∞µ‡∞ø‡∞ß‡±ç‡∞Ø‡∞Ç ‡∞â‡∞Ç‡∞¶‡∞ø.",
            'examples': "{examples} ‡∞µ‡∞Ç‡∞ü‡∞ø ‡∞â‡∞¶‡∞æ‡∞π‡∞∞‡∞£‡∞≤‡±Å ‡∞â‡∞®‡±ç‡∞®‡∞æ‡∞Ø‡∞ø.",
            'unity': "‡∞à ‡∞µ‡±à‡∞µ‡∞ø‡∞ß‡±ç‡∞Ø‡∞Ç‡∞≤‡±ã ‡∞è‡∞ï‡∞§‡±ç‡∞µ‡∞Ç ‡∞≠‡∞æ‡∞∞‡∞§‡∞¶‡±á‡∞∂ ‡∞™‡±ç‡∞∞‡∞§‡±ç‡∞Ø‡±á‡∞ï‡∞§.",
            'languages': "{north} ‡∞â‡∞§‡±ç‡∞§‡∞∞‡∞æ‡∞®, {south} ‡∞¶‡∞ï‡±ç‡∞∑‡∞ø‡∞£‡∞æ‡∞® ‡∞Æ‡∞æ‡∞ü‡±ç‡∞≤‡∞æ‡∞°‡±Å‡∞§‡∞æ‡∞∞‡±Å.",
            'conclusion': "‡∞≠‡∞æ‡∞∞‡∞§ ‡∞µ‡±à‡∞µ‡∞ø‡∞ß‡±ç‡∞Ø‡∞Ç ‡∞¶‡±á‡∞∂ ‡∞ó‡∞∞‡±ç‡∞µ‡∞ï‡∞æ‡∞∞‡∞£‡∞Ç."
        }
        
    def truly_summarize(self, text: str, max_length: int = 200) -> str:
        """Create a real summary by extracting and condensing key information"""
        
        # Split into sentences
        sentences = [s.strip() for s in re.split(r'[‡•§.]', text) if s.strip()]
        
        if len(sentences) <= 1:
            return text[:max_length] if len(text) <= max_length else text[:max_length-3] + "..."
        
        # Extract key information
        key_info = self._extract_key_information(sentences)
        
        # Generate condensed summary
        condensed = self._generate_condensed_summary(key_info)
        
        # Ensure it fits within max_length
        if len(condensed) <= max_length:
            return condensed
        else:
            # Trim intelligently
            words = condensed.split()
            result = ""
            for word in words:
                if len(result + " " + word) <= max_length - 1:
                    result += (" " + word) if result else word
                else:
                    break
            return result + "."
    
    def _extract_key_information(self, sentences: List[str]) -> Dict[str, str]:
        """Extract key concepts from sentences"""
        info = {
            'main_subject': '',
            'key_aspects': [],
            'examples': [],
            'conclusion': ''
        }
        
        for sentence in sentences:
            sentence_lower = sentence.lower()
            
            # Extract main subject (usually first sentence with ‡∞Ö‡∞®‡±á‡∞¶‡∞ø)
            if any(pattern in sentence_lower for pattern in self.definition_patterns):
                if not info['main_subject']:
                    # Extract the subject (part before ‡∞Ö‡∞®‡±á‡∞¶‡∞ø)
                    if '‡∞Ö‡∞®‡±á‡∞¶‡∞ø' in sentence:
                        subject = sentence.split('‡∞Ö‡∞®‡±á‡∞¶‡∞ø')[0].strip()
                        descriptor = sentence.split('‡∞Ö‡∞®‡±á‡∞¶‡∞ø')[1].strip() if len(sentence.split('‡∞Ö‡∞®‡±á‡∞¶‡∞ø')) > 1 else ''
                        info['main_subject'] = f"{subject} {descriptor[:50]}..."  # Condense
            
            # Extract key aspects (diversity aspects)
            if '‡∞µ‡±à‡∞µ‡∞ø‡∞ß‡±ç‡∞Ø‡∞Ç' in sentence or '‡∞µ‡∞ø‡∞≠‡∞ø‡∞®‡±ç‡∞®‡∞§' in sentence:
                aspects = []
                if '‡∞≠‡∞æ‡∞∑' in sentence: aspects.append('‡∞≠‡∞æ‡∞∑')
                if '‡∞∏‡∞Ç‡∞∏‡±ç‡∞ï‡±É‡∞§‡∞ø' in sentence: aspects.append('‡∞∏‡∞Ç‡∞∏‡±ç‡∞ï‡±É‡∞§‡∞ø')
                if '‡∞Æ‡∞§‡∞Ç' in sentence: aspects.append('‡∞Æ‡∞§‡∞Ç')
                if '‡∞Ü‡∞ö‡∞æ‡∞∞‡∞æ‡∞≤‡±Å' in sentence: aspects.append('‡∞Ü‡∞ö‡∞æ‡∞∞‡∞æ‡∞≤‡±Å')
                if aspects:
                    info['key_aspects'].extend(aspects)
            
            # Extract examples
            if any(pattern in sentence_lower for pattern in self.example_patterns):
                # Extract language examples
                if '‡∞π‡∞ø‡∞Ç‡∞¶‡±Ä' in sentence and '‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å' in sentence:
                    info['examples'].append('‡∞≠‡∞æ‡∞∑ ‡∞µ‡±à‡∞µ‡∞ø‡∞ß‡±ç‡∞Ø‡∞Ç')
                if '‡∞Æ‡∞§‡∞æ‡∞≤‡±Å' in sentence:
                    info['examples'].append('‡∞Æ‡∞§ ‡∞∏‡∞æ‡∞Æ‡∞∞‡∞∏‡±ç‡∞Ø‡∞Ç')
            
            # Extract conclusions
            if any(pattern in sentence_lower for pattern in self.conclusion_patterns):
                if '‡∞è‡∞ï‡∞§' in sentence or '‡∞ê‡∞ï‡±ç‡∞Ø‡∞§' in sentence:
                    info['conclusion'] = '‡∞è‡∞ï‡∞§‡∞≤‡±ã ‡∞Ö‡∞®‡±á‡∞ï‡∞§'
                elif '‡∞∞‡±Ç‡∞™‡∞ï‡∞≤‡±ç‡∞™‡∞®' in sentence:
                    info['conclusion'] = '‡∞µ‡±à‡∞µ‡∞ø‡∞ß‡±ç‡∞Ø ‡∞∞‡±Ç‡∞™‡∞ï‡∞≤‡±ç‡∞™‡∞®'
        
        return info
    
    def _generate_condensed_summary(self, info: Dict[str, str]) -> str:
        """Generate a condensed summary from extracted information"""
        
        parts = []
        
        # Main subject
        if info['main_subject']:
            parts.append(info['main_subject'])
        
        # Key aspects
        if info['key_aspects']:
            unique_aspects = list(set(info['key_aspects']))
            aspects_str = ', '.join(unique_aspects[:3])  # Limit to 3
            parts.append(f"{aspects_str} ‡∞µ‡∞ø‡∞∑‡∞Ø‡∞æ‡∞≤‡±ç‡∞≤‡±ã ‡∞µ‡±à‡∞µ‡∞ø‡∞ß‡±ç‡∞Ø‡∞Ç ‡∞ï‡∞®‡∞ø‡∞™‡∞ø‡∞∏‡±ç‡∞§‡±Å‡∞Ç‡∞¶‡∞ø")
        
        # Examples (condensed)
        if info['examples']:
            examples_str = ', '.join(info['examples'][:2])  # Limit to 2
            parts.append(f"{examples_str} ‡∞µ‡∞Ç‡∞ü‡∞ø ‡∞â‡∞¶‡∞æ‡∞π‡∞∞‡∞£‡∞≤‡±Å ‡∞â‡∞®‡±ç‡∞®‡∞æ‡∞Ø‡∞ø")
        
        # Conclusion
        if info['conclusion']:
            parts.append(f"‡∞á‡∞¶‡∞ø {info['conclusion']}‡∞ï‡±Å ‡∞â‡∞¶‡∞æ‡∞π‡∞∞‡∞£")
        
        # Join parts naturally
        if len(parts) == 1:
            return parts[0] + "."
        elif len(parts) == 2:
            return f"{parts[0]}. {parts[1]}."
        else:
            # For multiple parts, use natural flow
            summary = parts[0]
            for i in range(1, len(parts)):
                if i == len(parts) - 1:
                    summary += f". ‡∞ö‡∞ø‡∞µ‡∞∞‡∞ó‡∞æ, {parts[i]}."
                else:
                    summary += f". {parts[i]}"
            return summary

def test_real_summarizer():
    """Test the real summarizer"""
    
    text = """‡∞≠‡∞æ‡∞∞‡∞§‡∞¶‡±á‡∞∂‡∞Ç ‡∞Ö‡∞®‡±á‡∞¶‡∞ø ‡∞™‡±ç‡∞∞‡∞™‡∞Ç‡∞ö‡∞Ç‡∞≤‡±ã ‡∞Ö‡∞§‡±ç‡∞Ø‡∞Ç‡∞§ ‡∞µ‡±à‡∞µ‡∞ø‡∞ß‡±ç‡∞Ø‡∞≠‡∞∞‡∞ø‡∞§ ‡∞¶‡±á‡∞∂‡∞æ‡∞≤‡∞≤‡±ã ‡∞í‡∞ï‡∞ü‡∞ø‡∞ó‡∞æ ‡∞ó‡±Å‡∞∞‡±ç‡∞§‡∞ø‡∞Ç‡∞ö‡∞¨‡∞°‡∞ø‡∞Ç‡∞¶‡∞ø. ‡∞≠‡∞æ‡∞∑, ‡∞∏‡∞Ç‡∞∏‡±ç‡∞ï‡±É‡∞§‡∞ø, ‡∞Æ‡∞§‡∞Ç, ‡∞µ‡±á‡∞∑‡∞≠‡∞æ‡∞∑, ‡∞Ü‡∞ö‡∞æ‡∞∞‡∞æ‡∞≤‡±Å, ‡∞≠‡±ã‡∞ú‡∞® ‡∞Ö‡∞≤‡∞µ‡∞æ‡∞ü‡±ç‡∞≤‡±Å ‡∞Æ‡±ä‡∞¶‡∞≤‡±à‡∞® ‡∞Ö‡∞®‡±á‡∞ï ‡∞Ö‡∞Ç‡∞∂‡∞æ‡∞≤‡∞≤‡±ã ‡∞≠‡∞æ‡∞∞‡∞§‡∞¶‡±á‡∞∂‡∞Ç‡∞≤‡±ã ‡∞µ‡∞ø‡∞≠‡∞ø‡∞®‡±ç‡∞®‡∞§ ‡∞∏‡±ç‡∞™‡∞∑‡±ç‡∞ü‡∞Ç‡∞ó‡∞æ ‡∞ï‡∞®‡∞ø‡∞™‡∞ø‡∞∏‡±ç‡∞§‡±Å‡∞Ç‡∞¶‡∞ø. ‡∞™‡±ç‡∞∞‡∞§‡∞ø ‡∞∞‡∞æ‡∞∑‡±ç‡∞ü‡±ç‡∞∞‡∞æ‡∞®‡∞ø‡∞ï‡∞ø ‡∞§‡∞æ‡∞®‡±Å ‡∞™‡±ç‡∞∞‡∞§‡±ç‡∞Ø‡±á‡∞ï‡∞Ç‡∞ó‡∞æ ‡∞Ö‡∞≠‡∞ø‡∞µ‡±É‡∞¶‡±ç‡∞ß‡∞ø‡∞ö‡±á‡∞∏‡±Å‡∞ï‡±Å‡∞®‡±ç‡∞® ‡∞∏‡∞Ç‡∞™‡±ç‡∞∞‡∞¶‡∞æ‡∞Ø‡∞æ‡∞≤‡±Å, ‡∞™‡∞Ç‡∞°‡±Å‡∞ó‡∞≤‡±Å, ‡∞≠‡∞æ‡∞∑‡∞≤‡±Å ‡∞â‡∞Ç‡∞ü‡∞æ‡∞Ø‡∞ø. ‡∞â‡∞¶‡∞æ‡∞π‡∞∞‡∞£‡∞ï‡±Å, ‡∞â‡∞§‡±ç‡∞§‡∞∞ ‡∞≠‡∞æ‡∞∞‡∞§‡∞¶‡±á‡∞∂‡∞Ç‡∞≤‡±ã ‡∞π‡∞ø‡∞Ç‡∞¶‡±Ä ‡∞é‡∞ï‡±ç‡∞ï‡±Å‡∞µ‡∞ó‡∞æ ‡∞Æ‡∞æ‡∞ü‡±ç‡∞≤‡∞æ‡∞°‡∞ø‡∞§‡±á, ‡∞¶‡∞ï‡±ç‡∞∑‡∞ø‡∞£ ‡∞≠‡∞æ‡∞∞‡∞§‡∞¶‡±á‡∞∂‡∞Ç‡∞≤‡±ã ‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å, ‡∞§‡∞Æ‡∞ø‡∞≥‡∞Ç, ‡∞ï‡∞®‡±ç‡∞®‡∞°, ‡∞Æ‡∞≤‡∞Ø‡∞æ‡∞≥‡∞Ç ‡∞µ‡∞Ç‡∞ü‡∞ø ‡∞≠‡∞æ‡∞∑‡∞≤‡±Å ‡∞Æ‡∞æ‡∞ü‡±ç‡∞≤‡∞æ‡∞°‡∞§‡∞æ‡∞∞‡±Å. ‡∞Æ‡∞§‡∞™‡∞∞‡∞Ç‡∞ó‡∞æ ‡∞ï‡±Ç‡∞°‡∞æ ‡∞π‡∞ø‡∞Ç‡∞¶‡±Ç‡∞Æ‡∞§‡∞Ç, ‡∞á‡∞∏‡±ç‡∞≤‡∞æ‡∞Ç, ‡∞ï‡±ç‡∞∞‡±à‡∞∏‡±ç‡∞§‡∞µ‡∞Ç, ‡∞∏‡∞ø‡∞ï‡±ç‡∞ï‡∞ø‡∞ú‡∞Ç, ‡∞¨‡±å‡∞¶‡±ç‡∞ß‡∞Ç, ‡∞ú‡±à‡∞®‡∞ø‡∞ú‡∞Ç ‡∞≤‡∞æ‡∞Ç‡∞ü‡∞ø ‡∞Æ‡∞§‡∞æ‡∞≤‡±Å ‡∞∂‡∞æ‡∞Ç‡∞§‡∞ø‡∞Ø‡±Å‡∞§‡∞Ç‡∞ó‡∞æ ‡∞∏‡∞π‡∞ú‡±Ä‡∞µ‡∞®‡∞Ç ‡∞ö‡±á‡∞∏‡±ç‡∞§‡±Ç ‡∞¶‡±á‡∞∂ ‡∞∏‡∞Ç‡∞∏‡±ç‡∞ï‡±É‡∞§‡∞ø‡∞®‡∞ø ‡∞Æ‡∞∞‡∞ø‡∞Ç‡∞§ ‡∞™‡∞∞‡∞ø‡∞™‡±Å‡∞∑‡±ç‡∞ü‡∞ø‡∞ó‡∞æ ‡∞Æ‡∞æ‡∞∞‡±ç‡∞ö‡±Å‡∞§‡±Å‡∞®‡±ç‡∞®‡∞æ‡∞Ø‡∞ø. ‡∞à ‡∞µ‡∞ø‡∞≠‡∞ø‡∞®‡±ç‡∞®‡∞§ ‡∞Æ‡∞ß‡±ç‡∞Ø‡∞≤‡±ã ‡∞è‡∞ï‡∞§‡±ç‡∞µ ‡∞≠‡∞æ‡∞µ‡∞®‡∞®‡±Å ‡∞ï‡∞≤‡∞ø‡∞ó‡∞ø‡∞Ç‡∞ö‡∞°‡∞Ç ‡∞≠‡∞æ‡∞∞‡∞§‡∞¶‡±á‡∞∂ ‡∞™‡±ç‡∞∞‡∞§‡±ç‡∞Ø‡±á‡∞ï‡∞§. '‡∞è‡∞ï‡∞§‡∞≤‡±ã ‡∞Ö‡∞®‡±á‡∞ï‡∞§' ‡∞Ö‡∞®‡±á ‡∞∏‡±Ç‡∞§‡±ç‡∞∞‡∞æ‡∞®‡±ç‡∞®‡∞ø ‡∞Ü‡∞ö‡∞∞‡∞ø‡∞∏‡±ç‡∞§‡±Ç, ‡∞≠‡∞æ‡∞∞‡∞§ ‡∞™‡±ç‡∞∞‡∞ú‡∞≤‡±Å ‡∞§‡∞Æ ‡∞µ‡∞ø‡∞≠‡∞ø‡∞®‡±ç‡∞®‡∞§‡∞®‡±Å ‡∞ó‡±å‡∞∞‡∞µ‡∞ø‡∞Ç‡∞ö‡±Å‡∞ï‡±Å‡∞Ç‡∞ü‡±Ç ‡∞í‡∞ï ‡∞¶‡±á‡∞∂‡∞Ç‡∞ó‡∞æ ‡∞Æ‡±Å‡∞Ç‡∞¶‡±Å‡∞ï‡±Ü‡∞≥‡±ç‡∞§‡±Å‡∞®‡±ç‡∞®‡∞æ‡∞∞‡±Å. ‡∞≠‡∞æ‡∞∞‡∞§ ‡∞µ‡±à‡∞µ‡∞ø‡∞ß‡±ç‡∞Ø‡∞Æ‡∞Ç‡∞§‡∞æ ‡∞¶‡±á‡∞∂ ‡∞∏‡∞Ç‡∞∏‡±ç‡∞ï‡±É‡∞§‡∞ø‡∞®‡∞ø, ‡∞ö‡∞∞‡∞ø‡∞§‡±ç‡∞∞‡∞®‡±Å, ‡∞ê‡∞ï‡±ç‡∞Ø‡∞§‡∞®‡±Å ‡∞™‡±ç‡∞∞‡∞§‡∞ø‡∞¨‡∞ø‡∞Ç‡∞¨‡∞ø‡∞Ç‡∞ö‡±á ‡∞∂‡∞ï‡±ç‡∞§‡∞ø‡∞µ‡∞Ç‡∞§‡∞Æ‡±à‡∞® ‡∞∞‡±Ç‡∞™‡∞ï‡∞≤‡±ç‡∞™‡∞®‡∞ó‡∞æ ‡∞®‡∞ø‡∞≤‡∞ø‡∞ö‡∞ø‡∞Ç‡∞¶‡∞ø."""
    
    print("üéØ TESTING REAL TELUGU SUMMARIZER")
    print("=" * 60)
    print(f"Original text ({len(text)} chars):")
    print(text[:100] + "...")
    print()
    
    summarizer = RealTeluguSummarizer()
    
    for max_len in [150, 200, 300]:
        summary = summarizer.truly_summarize(text, max_len)
        print(f"üìù Summary (max {max_len} chars, actual {len(summary)} chars):")
        print(f"   {summary}")
        print()
        
        # Check if it's actually different from input
        is_copy = text.startswith(summary.replace("...", "").strip())
        print(f"   Is this just a copy? {'‚ùå YES - STILL COPYING' if is_copy else '‚úÖ NO - REAL SUMMARY'}")
        print("-" * 50)

if __name__ == "__main__":
    test_real_summarizer()
