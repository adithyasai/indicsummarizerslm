#!/usr/bin/env python3
"""
Interactive Telugu Summarizer Testing Tool - DEBUGGING VERSION
Test the improved summarizer with your own text inputs and debug issues
"""

import sys
import os
sys.path.append(os.path.abspath('.'))

from proper_slm_summarizer import StateOfTheArtIndicSummarizer
from true_abstractive_summarizer import TrueAbstractiveSummarizer
import time

def interactive_testing():
    """Interactive testing interface for the Telugu summarizer with debugging"""
    
    print("üêõ INTERACTIVE TELUGU SUMMARIZER DEBUGGING")
    print("=" * 60)
    print("‚ú® Let's debug the summarizer issues!")
    print("üìù Enter Telugu text and see what's going wrong")
    print("üîß We'll test with different settings to find the problem")
    print("‚ùå Type 'quit' or 'exit' to stop")
    print("-" * 60)
    
    # Initialize summarizer once
    print("üîÑ Initializing summarizers...")
    try:
        old_summarizer = StateOfTheArtIndicSummarizer()
        new_summarizer = TrueAbstractiveSummarizer()
        print("‚úÖ Both summarizers ready!")
    except Exception as e:
        print(f"‚ùå Failed to initialize: {e}")
        return
    
    print("\n" + "="*60)
    
    test_count = 0
    
    while True:
        test_count += 1
        print(f"\nüìù TEST #{test_count}")
        print("-" * 30)
        
        # Get text input
        print("üî∏ Enter Telugu text to summarize:")
        print("   (You can paste multi-line text, press Enter twice when done)")
        
        lines = []
        while True:
            try:
                line = input()
                if line.strip() == "":
                    if lines:  # If we have some content, break
                        break
                    else:  # If no content yet, continue
                        continue
                        
                if line.strip().lower() in ['quit', 'exit', 'q']:
                    print("üëã Goodbye!")
                    return
                    
                lines.append(line)
            except KeyboardInterrupt:
                print("\nüëã Goodbye!")
                return
        
        text = "\n".join(lines).strip()
        
        if not text:
            print("‚ö†Ô∏è  No text entered. Try again!")
            continue
        
        # Get max_length preference
        print(f"\nüîß Choose summary length:")
        print("   1. Short (150 chars) - Usually 1-2 sentences")
        print("   2. Medium (250 chars) - Usually 2-3 sentences") 
        print("   3. Long (350 chars) - Usually 3-4 sentences")
        print("   4. Custom length")
        
        try:
            choice = input("üëâ Enter choice (1-4) [default: 2]: ").strip()
            
            if choice == "1":
                max_length = 150
            elif choice == "3":
                max_length = 350
            elif choice == "4":
                custom = input("üëâ Enter custom length (100-500): ").strip()
                max_length = max(100, min(500, int(custom))) if custom.isdigit() else 250
            else:  # Default or choice == "2"
                max_length = 250
                
        except ValueError:
            max_length = 250
            print("‚ö†Ô∏è  Invalid input, using default length (250)")
        
        # Choose summarizer type
        print(f"\nü§ñ Choose summarizer:")
        print("   1. OLD: State-of-the-art (copying sentences)")
        print("   2. NEW: True Abstractive (generates new text)")
        
        try:
            summ_choice = input("üëâ Enter choice (1-2) [default: 2]: ").strip()
            use_new = summ_choice != "1"
        except:
            use_new = True
        
        # Process and display results
        print(f"\n‚ö° Processing with {'NEW Abstractive' if use_new else 'OLD State-of-art'} (max_length={max_length})...")
        print("-" * 40)
        
        start_time = time.time()
        try:
            if use_new:
                summary = new_summarizer.create_true_summary(text, max_length=max_length)
                method = "true_abstractive"
                summary_sentences = [s.strip() for s in summary.split('.') if s.strip()]
            else:
                summary, method = old_summarizer.summarize(text, max_length=max_length)
                summary_sentences = old_summarizer._preprocess_text(summary)
                
            execution_time = time.time() - start_time
            
            # Display results
            print(f"‚úÖ RESULTS:")
            print(f"   üïí Time: {execution_time:.3f}s")
            print(f"   üîß Method: {method}")
            print(f"   üìè Length: {len(summary)}/{max_length} characters")
            print(f"   üìù Sentences: {len(summary_sentences)}")
            print(f"   üìä Compression: {len(summary)/len(text):.1%}")
            
            print(f"\nüéØ SUMMARY:")
            print(f"   {summary}")
            
            # Show individual sentences if multiple
            if len(summary_sentences) > 1:
                print(f"\nüìã SENTENCE BREAKDOWN:")
                for i, sentence in enumerate(summary_sentences, 1):
                    print(f"   {i}. {sentence}")
            
        except Exception as e:
            print(f"‚ùå Summarization failed: {e}")
            continue
        
        print("\n" + "="*60)
        
        # Ask if user wants to continue
        continue_choice = input("üîÑ Test another text? (y/n) [default: y]: ").strip().lower()
        if continue_choice in ['n', 'no']:
            print("üëã Thanks for testing!")
            break

def quick_demo():
    """Quick demo with sample texts"""
    
    print("üöÄ QUICK DEMO MODE")
    print("-" * 30)
    
    sample_texts = [
        {
            "title": "Sample 1: Technology News",
            "text": """‡∞ü‡±Ü‡∞ï‡±ç‡∞®‡∞æ‡∞≤‡∞ú‡±Ä ‡∞∞‡∞Ç‡∞ó‡∞Ç‡∞≤‡±ã ‡∞≠‡∞æ‡∞∞‡∞§‡∞¶‡±á‡∞∂‡∞Ç ‡∞µ‡±á‡∞ó‡∞Ç‡∞ó‡∞æ ‡∞Ö‡∞≠‡∞ø‡∞µ‡±É‡∞¶‡±ç‡∞ß‡∞ø ‡∞ö‡±Ü‡∞Ç‡∞¶‡±Å‡∞§‡±ã‡∞Ç‡∞¶‡∞ø. ‡∞ï‡±É‡∞§‡±ç‡∞∞‡∞ø‡∞Æ ‡∞Æ‡±á‡∞ß, ‡∞¨‡±ç‡∞≤‡∞æ‡∞ï‡±ç‚Äå‡∞ö‡±à‡∞®‡±ç, ‡∞ï‡±ç‡∞≤‡±å‡∞°‡±ç ‡∞ï‡∞Ç‡∞™‡±ç‡∞Ø‡±Ç‡∞ü‡∞ø‡∞Ç‡∞ó‡±ç ‡∞µ‡∞Ç‡∞ü‡∞ø ‡∞Ü‡∞ß‡±Å‡∞®‡∞ø‡∞ï ‡∞∏‡∞æ‡∞Ç‡∞ï‡±á‡∞§‡∞ø‡∞ï‡∞§‡∞≤‡∞≤‡±ã ‡∞¶‡±á‡∞∂‡∞Ç ‡∞Æ‡±Å‡∞Ç‡∞¶‡±Å‡∞Ç‡∞°‡∞ø ‡∞®‡∞°‡±Å‡∞∏‡±ç‡∞§‡±ã‡∞Ç‡∞¶‡∞ø. ‡∞π‡±à‡∞¶‡∞∞‡∞æ‡∞¨‡∞æ‡∞¶‡±ç, ‡∞¨‡±Ü‡∞Ç‡∞ó‡∞≥‡±Ç‡∞∞‡±Å, ‡∞™‡±Å‡∞£‡±Ü ‡∞µ‡∞Ç‡∞ü‡∞ø ‡∞®‡∞ó‡∞∞‡∞æ‡∞≤‡±Å ‡∞™‡±ç‡∞∞‡∞™‡∞Ç‡∞ö ‡∞∏‡±ç‡∞•‡∞æ‡∞Ø‡∞ø ‡∞ü‡±Ü‡∞ï‡±ç ‡∞π‡∞¨‡±ç‚Äå‡∞≤‡±Å‡∞ó‡∞æ ‡∞Æ‡∞æ‡∞∞‡∞æ‡∞Ø‡∞ø. ‡∞Æ‡∞∞‡±ã 10 ‡∞∏‡∞Ç‡∞µ‡∞§‡±ç‡∞∏‡∞∞‡∞æ‡∞≤‡∞≤‡±ã ‡∞≠‡∞æ‡∞∞‡∞§‡∞¶‡±á‡∞∂‡∞Ç ‡∞™‡±ç‡∞∞‡∞™‡∞Ç‡∞ö‡∞Ç‡∞≤‡±ã ‡∞ü‡∞æ‡∞™‡±ç 3 ‡∞ü‡±Ü‡∞ï‡±ç‡∞®‡∞æ‡∞≤‡∞ú‡±Ä ‡∞¶‡±á‡∞∂‡∞æ‡∞≤‡∞≤‡±ã ‡∞í‡∞ï‡∞ü‡∞ø‡∞ó‡∞æ ‡∞®‡∞ø‡∞≤‡±Å‡∞∏‡±ç‡∞§‡±Å‡∞Ç‡∞¶‡∞®‡∞ø ‡∞®‡∞ø‡∞™‡±Å‡∞£‡±Å‡∞≤‡±Å ‡∞Ö‡∞Ç‡∞ö‡∞®‡∞æ ‡∞µ‡±á‡∞∏‡±ç‡∞§‡±Å‡∞®‡±ç‡∞®‡∞æ‡∞∞‡±Å."""
        },
        {
            "title": "Sample 2: Health News", 
            "text": """‡∞ï‡∞∞‡±ã‡∞®‡∞æ ‡∞µ‡±à‡∞∞‡∞∏‡±ç ‡∞Æ‡∞π‡∞Æ‡∞æ‡∞∞‡∞ø ‡∞§‡∞∞‡±ç‡∞µ‡∞æ‡∞§ ‡∞™‡±ç‡∞∞‡∞ú‡∞≤‡∞≤‡±ã ‡∞Ü‡∞∞‡±ã‡∞ó‡±ç‡∞Ø ‡∞Ö‡∞µ‡∞ó‡∞æ‡∞π‡∞® ‡∞™‡±Ü‡∞∞‡∞ø‡∞ó‡∞ø‡∞Ç‡∞¶‡∞ø. ‡∞Ø‡±ã‡∞ó‡∞æ, ‡∞µ‡±ç‡∞Ø‡∞æ‡∞Ø‡∞æ‡∞Æ‡∞Ç, ‡∞Ü‡∞∞‡±ã‡∞ó‡±ç‡∞Ø‡∞ï‡∞∞‡∞Æ‡±à‡∞® ‡∞Ü‡∞π‡∞æ‡∞∞‡∞Ç ‡∞µ‡±à‡∞™‡±Å ‡∞Æ‡∞∞‡∞ø‡∞Ç‡∞§ ‡∞¶‡±É‡∞∑‡±ç‡∞ü‡∞ø ‡∞™‡±Ü‡∞ü‡±ç‡∞ü‡±Å‡∞§‡±Å‡∞®‡±ç‡∞®‡∞æ‡∞∞‡±Å. ‡∞™‡±ç‡∞∞‡∞≠‡±Å‡∞§‡±ç‡∞µ‡∞Ç ‡∞ï‡±Ç‡∞°‡∞æ ‡∞™‡±ç‡∞∞‡∞æ‡∞•‡∞Æ‡∞ø‡∞ï ‡∞µ‡±à‡∞¶‡±ç‡∞Ø ‡∞∏‡±á‡∞µ‡∞≤‡∞®‡±Å ‡∞¨‡∞≤‡±ã‡∞™‡±á‡∞§‡∞Ç ‡∞ö‡±á‡∞∏‡±ç‡∞§‡±ã‡∞Ç‡∞¶‡∞ø. ‡∞ü‡±Ü‡∞≤‡∞ø‡∞Æ‡±Ü‡∞°‡∞ø‡∞∏‡∞ø‡∞®‡±ç, ‡∞°‡∞ø‡∞ú‡∞ø‡∞ü‡∞≤‡±ç ‡∞π‡±Ü‡∞≤‡±ç‡∞§‡±ç ‡∞∞‡∞ø‡∞ï‡∞æ‡∞∞‡±ç‡∞°‡±ç‡∞∏‡±ç ‡∞µ‡∞Ç‡∞ü‡∞ø ‡∞ï‡±ä‡∞§‡±ç‡∞§ ‡∞™‡∞¶‡±ç‡∞ß‡∞§‡±Å‡∞≤‡±Å ‡∞™‡±ç‡∞∞‡∞µ‡±á‡∞∂‡∞™‡±Ü‡∞ü‡±ç‡∞ü‡∞¨‡∞°‡±Å‡∞§‡±Å‡∞®‡±ç‡∞®‡∞æ‡∞Ø‡∞ø."""
        }
    ]
    
    print("üìù Testing with sample texts...\n")
    
    old_summarizer = StateOfTheArtIndicSummarizer()
    new_summarizer = TrueAbstractiveSummarizer()
    
    for i, sample in enumerate(sample_texts, 1):
        print(f"üî∏ {sample['title']}")
        print(f"üìÑ Original: {sample['text'][:100]}...")
        
        # Test both summarizers
        old_summary, old_method = old_summarizer.summarize(sample['text'], max_length=200)
        new_summary = new_summarizer.create_true_summary(sample['text'], max_length=200)
        
        print(f"‚ùå OLD Summary: {old_summary}")
        print(f"‚úÖ NEW Summary: {new_summary}")
        print("-" * 50)

if __name__ == "__main__":
    print("üåü TELUGU SUMMARIZER INTERACTIVE TESTER")
    print("=" * 50)
    print("Choose testing mode:")
    print("1. Interactive Testing (enter your own text)")
    print("2. Quick Demo (sample texts)")
    
    try:
        choice = input("üëâ Enter choice (1-2) [default: 1]: ").strip()
        
        if choice == "2":
            quick_demo()
        else:
            interactive_testing()
            
    except KeyboardInterrupt:
        print("\nüëã Goodbye!")
